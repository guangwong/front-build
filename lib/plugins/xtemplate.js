/*
Compiler xtemplate for kissy
 */


var fu = require('../fileutil');
var fs = require('fs');
var path = require('path');
var async = require('async');
var _ = require('underscore');
var S = require('kissy');

var codeTemplate = '' +
    '/*\n' +
    '  Generated by kissy-xtemplate(kissy pie).' +
    '*/\n' +
    'KISSY.add(function(){\n' +
    '    return {code}\n' +
    '});';

function buildTemplate (job, callback) {
    S.use('xtemplate/compiler', function (S, XTemplateCompiler) {
        fs.readFile(job.src, 'utf8', function (err, tplContent) {
            if (err) {
                return callback(err);
            }
            var code = XTemplateCompiler.compileToStr(tplContent);
            var moduleCode = S.substitute(codeTemplate, {
                code: code
            });
            // moduleCode = my_js_beautify(moduleCode);
            fs.writeFile(job.target, moduleCode, 'utf8', callback);
        });
    });
}

/**
 * plugin xtemplate for FrontBuild
 * will mixin the imported css
 */
module.exports = function (config) {
    config = _.extend({
        //css 正则
        fileReg: /-xtpl\.html$/i
    }, config);

    return function (page, next) {
        var start_time = new Date();

        var reports = {
            name: 'xtemplate',
            files: []
        };
        var srcBase = page.srcDir;


        fu.findInDir(srcBase, config.fileReg, function (err, files) {

            if (err) {
                return next(err);
            }
            if (!files.length) {
                reports.used_time = new Date() - start_time;
                return next(null, reports);
            }

            async.forEach(files, function (file, callback) {
                var job = {
                    src: path.resolve(srcBase, file),
                    target: path.resolve(srcBase, file.replace(/\.html$/i, '.js')),
                    file: file
                };
                reports.files.push(file);
                buildTemplate(job, callback);

            }, function (err) {
                if (err) {
                    return next(err);
                }
                reports.used_time = new Date() - start_time;
                next(null, reports);
            });
        });

    }
};
